> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* GUIA PARA CREAR UN CRUD CON DJANGO
> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PARTE N°1 INSATALACION DE DEPENDECIAS

1 Instalar:
Git
Xammp
SqlYog
Python
Visual Studio Code
Instalar la extesnion Python para Visual Studio Code

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
2 Crear un carpeta con el nombre Django en el escritorio
o en cualquier parte.
 
3 Abrir carpeta Django con VSCODE.
4 Instalar Django de manera global(terminal):

pip install Django==3.2.8

5 Crear proyecto Django:

django-admin.py startproject sistema			 

6 Cerrar carpeta Django.

7 Abrir carpeta del proyecto, es decir la carpeta sistema.

8 Correr el servidor(terminal):

py manage.py runserver

9 Detener el servidor(terminal):

Control+c

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
10 Crear un entorno virtual (terminal):

py -m venv env

11 Activar entorno virtual(terminal):

env\scripts\activate

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
12 Instalar complementos en el entorno virtual(terminal):

pip install Django==3.2.8
pip install Pillow==9.3.0
pip install PyMySQL==1.0.2
pip install sqlparse==0.4.3

nota: recuerda que para instala las dependecias
debes estar conectado a internet.

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
13 Activar el servidor MySQL(xampp).

14 Crear una base de datos para el proyecto(sqlyog).

15 Conectar la base de datos con Django:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'veterinaria',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '3306'
    }
}

16 Importart modulo MySQL en sistema>_init_.py

import pymysql
pymysql.install_as_MySQLdb()

17 Correr el servidor(terminal) para verificar
que no haya ningun error de la conxion.
Si el servidor corre sin ningun problema
sisgnifica que la conexion ha sido exitosa, de
lo contraio aparece un mesaje de error en
la terminal.

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
17 Hacer migraciones de los modelos(tablas)
que vienen por defecto en nuestro proyecto(terminal).
Si todo esta bien deberian crearse unas tablas
en nuestra base de datos(revisar en sqlyog).

py manage.py migrate

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

18 Crear superusuario(terminal):

py manage.py createsuperuser


username:admin
email:yobanichicunque@gmail.com
password:12345

19 Ir a la base de datos en sqlyog, abrir la tabla auth_user,
y en los siguientes campos poner el nombre y apellido del usuario:

name:Yobani
lastname:Chicunque

20 Ir al Panel de administracion y loguearse con
username y password:

username:admin
password:12345

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
24 Crear una aplicacion(terminal):

py manage.py startapp mascotas


25 Añadir la aplicacion en la configuracion del proyecto
en sistema>settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'contacto',
]
> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
26 Configurar el lenguaje en sistema>settings.py

LANGUAGE_CODE = 'es-co'

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
21 Hacer modelos y relaciones 
en mascotas>models.py

#Ejemplo de relacion: de uno a muchos y de muchos a muchos
persona = models.ForeignKey(Persona, null=True, blank=True, on_delete=models.CASCADE)
vacuna = models.ManyToManyField(Vacuna, blank=True)

22 Hacer las migraciones de los modelos(terminal):

py manage.py makemigrations
py manage.py migrate

Nota: Para hacer modificaciones de los modelos(tablas), por ejemplo, 
cambiar el nombre de los camposse edita el el modelo creado y se 
ejecutarn los dos comandos anteriores.

py manage.py makemigrations
py manage.py migrate
> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
23 Registrar los modelos en sistema>mascotas>admin.py

from django.contrib import admin
from .models import Mascota, Vacuna

admin.site.register(Mascota)
admin.site.register(Vacuna)

Nota: con esto puedo hacer pruebas desde el user(admin) para saber si se estan guardando mis registros
en mi tablas de la base de datos, sin antes haber creado un formulario de registro
en html.
> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
25 Abrir shell Django y Hacer Querysets(consultas) de la base de datos

py manage.py shell

26 importar los modelos de la aplicacion, para poder hacer consultas(Querysets)
(shell Django)

from mascotas.models import Persona, Vacuna, Mascota

27 hacer consultas(Querysets) en la shell Django. La siguiente consulta
muestra todos los registros del Modelo Mascota

Mascota.objects.all()

28 insertar registros en la sehll Django. Exiten dos formas de insertar
registros

-Forma numero 1(forma recomedada)

Mascota.objects.create(nombre="Daniel1",
edad=24,
foto="imagenes/daniel.jpg",
fecha="2023-01-25",
correo="daniel@gmail.com")

#El registro se guarda automaticamente

Forma numero 2

p2=Persona(nombre="Daniel2",
edad=24,
foto="imagenes/daniel.jpg",
fecha="2023-01-25",
correo="daniel@gmail.com")
p2.save() #Para guardar el registro


30 Asignar un modelo como llave foranea(de uno a muchos) en un registro

p1=Persona.objects.get(id=1)#instacio(declaro) una variable que almacene
#un registro en especifico.
#En este caso sera la persona con el id=1, es decir Daniel1.

Mascota.objects.create(nombre="Coco",
sexo="Macho",
edad_aproximada=2,
fecha_rescate="2023-01-25",
persona=p1)


31 Asigna un modelo como llave foranea(de muchos a muchos) 
en un registro

mascota1=Mascota.objects.get(id=1)

v1=Vacuna.objects.get(id=1)

v2=Vacuna.objects.get(id=2)

v3=Vacuna.objects.get(id=3)

mascota1.vacuna.add(v1,v2,v3)

35 Hacer consultas con shell (Querysets)

Obtener todos los registros que guarda una tabla y mostrarlos en
la shell

Mascota.objects.all()

Hacer un filtro en la consulta.Es decir que obtenga  unos 
registros en concreto o que yo especifique en el filtro.

Mascota.objects.filter(id=2)

Hacer un filtro para que obtenga los registros cuando
un registro tenga determinada letra, numero o palabra o frase.
Para ello debemos indica el nombre del campo seguido de dos 
guiones bajos y lapalabra contains.


Mascota.objects.filter(nombre__contains="z")

nota: buscar en la documentacion de Django como hacer mas
consultas de diferentes tipos.


> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PARTE N°2 CONFIGURACION DE URLs Y PRIMERA VIEW
> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* Creacion de una vistas y urls

1 mporta la HttpResponse en views

from django.http import HttpResponse

2 Luego crear un funcion que imprima una frase en el
navegador

def index(request):
    return HttpResponse("Hola mascota")

3 Nota: En las settings la varible ROOT_URLCONF se le asigna la ubicacion de 
las url globales del proyecto. Esta variable se crea automaticamente
cuando creamos el protyecto. Y es importante para poder mostrar
las vistas de nuestras aplicaciones

ROOT_URLCONF = 'sistema.urls'

4 Crear el archivo urls.py en mascota.py
donde podremos listar todas las url de la aplicacion y ponemos
los siguinente

from django.urls import path
from . import views #importa todas las vistas de views.py

urlpatterns = [
    path('', views.index, name="index_mascota"), #Creamos nuestra primer vista
]

5 Incluir las urls de las aplicaiones dentro de las url globales
en sistema>urls.py. Para ello importamos include e incluimos
las urls de nuestra aplicion(es)

from django.urls import include

path('', include('mascota.urls')),
path('adopcion/', include('adopcion.urls')),

6 Corre el servido para ensayar si esta 
las vista y las urls estan funcionando 
correctamente

> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PARTE N°3 SISTEMA DE PLANTILLAS 
> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1 Confurar achivo settings.py para poder leer 
todas los templates, ya sea en una carpeta alojada
en la raiz del proyecto o en la carpeta template de 
cada aplicacion.

import os

TEMPLATES = [
    {
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
    },
]

Ver el video 10
















